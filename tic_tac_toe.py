import sys # –ø—Ä–æ–≤–µ—Ä—è–ª –æ—Ç–ª–∞–¥–∫—É –∏ –≤—Å—Ç–∞–≤–ª—è–ª sys.exit() –≥–¥–µ –º–Ω–µ –Ω—É–∂–Ω–æ –±—ã–ª–æ
# === –î–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã ===

def with_separator(func):
    """–î–æ–±–∞–≤–ª—è–µ—Ç —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏ —Å–≤–µ—Ä—Ö—É –∏ —Å–Ω–∏–∑—É –≤—ã–≤–æ–¥–∞"""
    def wrapper(*args, **kwargs):
        print("\n" + "-" * 15)
        result = func(*args, **kwargs)
        print("-" * 15 + "\n")
        return result
    return wrapper


def log_move(func):
    """–õ–æ–≥–∏—Ä—É–µ—Ç —Ö–æ–¥—ã –∏–≥—Ä–æ–∫–æ–≤"""
    def wrapper(*args, **kwargs):
        result = func(*args, **kwargs)
        print(f"[LOG] –ò–≥—Ä–æ–∫ {args[0]} —Å–¥–µ–ª–∞–ª —Ö–æ–¥: {chr(result[0] + 97)}{result[1] + 1}")
        return result
    return wrapper


def validate_move(func):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞ –∏ –∑–∞–Ω—è—Ç–æ—Å—Ç—å –∫–ª–µ—Ç–∫–∏"""
    def wrapper(player):
        while True:
            move = input(f"–•–æ–¥ –∏–≥—Ä–æ–∫–∞ {player} (–Ω–∞–ø—Ä–∏–º–µ—Ä a1, b3) –∏–ª–∏ 'q' –¥–ª—è –≤—ã—Ö–æ–¥–∞:").strip().lower()
            if move.lower() =="q":
                print("–∏–≥—Ä–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –∏–≥—Ä–æ–∫–æ–º")
                return None
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã –∏ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
            if len(move) != 2 or move[0] not in "abc" or move[1] not in "123":
                print("–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç a1, b2, c3.")
                continue

            row, col = ord(move[0]) - 97, int(move[1]) - 1

            if board[row][col] == " ":
                return row, col
            else:
                print("–û—à–∏–±–∫–∞: –∫–ª–µ—Ç–∫–∞ –∑–∞–Ω—è—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    return wrapper

# === –ò–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ ===
board = [[" " for _ in range(3)] for _ in range(3)]


# === –§—É–Ω–∫—Ü–∏–∏ ===
@with_separator
def print_board():
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª—è —Å –±—É–∫–≤–∞–º–∏ –∏ —Ü–∏—Ñ—Ä–∞–º–∏
    print("  1 2 3")
    for i, row in enumerate(board):
        # –∑–∞–º–µ–Ω—è–µ–º –ø—Ä–æ–±–µ–ª—ã –Ω–∞ —Ç–æ—á–∫–∏ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –≤—ã–≤–æ–¥–µ
        display = [cell if cell != " " else "." for cell in row]
        print(chr(97+i), " ".join(display))


def check_win(player):
    for i in range(3):
        # –±–µ—Ä–µ–º —Å—Ç—Ä–æ–∫—É —Å –∏–Ω–¥–µ–∫—Å–æ–º i
        # –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –µ–µ —ç–ª–µ–º–µ–Ω—Ç—ã (j= 0...2)
        #–µ—Å–ª–∏ –≤—Å–µ —Ç—Ä–∏ –∫–ª–µ—Ç–∫–∏ —Å—Ç—Ä–æ–∫–∏ —Ä–∞–≤–Ω—ã player (X –∏–ª–∏ O),—Ç–æ —ç—Ç–æ –ø–æ–±–µ–¥–∞
        if all(board[i][j] == player for j in range(3)):
            return True
        # –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–æ–ª–±—Ü–æ–≤.–ë–µ—Ä–µ–º —Å—Ç–æ–ª–±–µ—Ü —Å –∏–Ω–¥–µ–∫—Å–æ–º j –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–∫–∂–µ –∫–∞–∫ –∏ —Å—Ç—Ä–æ–∫—É
        if all(board[j][i] == player for j in range(3)):
            return True
        # –ø—Ä–æ–≤–µ—Ä–∫–∞ –≥–ª–∞–≤–Ω–æ–π –¥–∏–∞–≥–æ–Ω–∞–ª–∏ (—Å–ª–µ–≤–∞ —Å–≤–µ—Ä—Ö—É -> –≤–ø—Ä–∞–≤–æ –≤–Ω–∏–∑)
    if all(board[i][i] == player for i in range(3)):
        return True
        # –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–±–æ—á–Ω–æ–π –¥–∏–∞–≥–æ–Ω–∞–ª–∏ (—Å–ø—Ä–∞–≤–∞ —Å –≤–µ—Ä—Ö—É -> –≤–ª–µ–≤–æ –≤–Ω–∏–∑)
    if all(board[i][2 - i] == player for i in range(3)):
        return True
    # –Ω–∏ –æ–¥–Ω–æ —É—Å–ª–æ–≤–∏–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ
    return False


#def no_win_possible():
    """
     –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∏–≥—Ä–æ–∫ –µ—â–µ –ø–æ–±–µ–¥–∏—Ç—å.
     –ï—Å–ª–∏ –Ω–µ—Ç - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è True (–Ω–∏–Ω—å—è)
    """
 #   for i in range(3):
 #      for j in range(3):
  #         if board[i][j] == " ":
                # –≤—Ä–µ–º–µ–Ω–Ω–æ –ø—Ä–æ–±—É–µ–º —Å—Ç–∞–≤–∏—Ç—å –•
  #              board[i][j] = "X"
  #              if check_win("X"):
   #                 board[i][j] = " "
   #                 return False
  #              # –≤—Ä–µ–º–µ–Ω–Ω–æ –ø—Ä–æ–±—É–µ–º —Å—Ç–∞–≤–∏—Ç—å O
   #             board[i][j] = "O"
   #             if check_win("O"):
    #                board[i][j] = " "
     #               return False
   #         board[i][j] = " "
   # return True
# –ø—ã—Ç–∞–ª—Å—è –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–æ—Å—Ä–æ—á–Ω–æ–π –Ω–∏—á—å–µ–π —É –º–µ–Ω—è –Ω–µ 
#–ø–æ–ª—É—á–∏–ª–æ—Å—å, –µ—Å–ª–∏ –ø–æ–¥—Å–∫–∞–∂–∏—Ç–µ –∫–∞–∫ –±—É–¥—É —Ä–∞–¥

@validate_move
@log_move
def get_move(player):
    row, col = -1, -1  # –∑–∞–≥–ª—É—à–∫–∏, —Ä–µ–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤–µ—Ä–Ω—ë—Ç validate_move
    return row, col
    
# ===–æ—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–≥—Ä—ã===
def main():
    current_player = "X"
    moves = 0

    print_board()  # –ø–µ—Ä–≤–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—É—Å—Ç–æ–≥–æ –ø–æ–ª—è

    while True:
        # —Ö–æ–¥ –∏–≥—Ä–æ–∫–∞
        result = get_move(current_player)
        if result is None:
            break
        row, col = result
        board[row][col] = current_player

        # –≤—ã–≤–æ–¥ –ø–æ–ª—è
        print_board()

        # –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–±–µ–¥—ã
        if check_win(current_player):
            print(f"üéâ –ò–≥—Ä–æ–∫ {current_player} –ø–æ–±–µ–¥–∏–ª!")
            break

        # –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á—ë—Ç—á–∏–∫–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∏—á—å–∏
        moves += 1
        if moves == 9:
            print("ü§ù –ù–∏—á—å—è!")
            break

        # —Å–º–µ–Ω–∞ –∏–≥—Ä–æ–∫–∞
        current_player = "O" if current_player == "X" else "X"


# —É—Å–ª–æ–≤–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –∑–∞–ø—É—Å–∫–∞,—á—Ç–æ–±—ã –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–¥–∞ –≤ –¥—Ä—É–≥–æ–π —Ñ–∞–π–ª –Ω–µ –ø—Ä–æ–∏–∑–æ—à–µ–ª –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫
if __name__ == "__main__":
    main()